
//! Autogenerated weights for `ternoa_marketplace`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-18, STEPS: `2`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `DESKTOP-PAL18UV`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("alphanet-dev"), DB CACHE: 1024

// Executed Command:
// D:\TernoaCode\ternoa-node\target\production\ternoa.exe
// benchmark
// pallet
// --chain=alphanet-dev
// --steps=2
// --repeat=1
// --pallet=ternoa_marketplace
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `ternoa_marketplace`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> ternoa_marketplace::WeightInfo for WeightInfo<T> {
	// Storage: Marketplace MarketplaceMintFee (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Marketplace NextMarketplaceId (r:1 w:1)
	// Storage: Marketplace Marketplaces (r:0 w:1)
	fn create_marketplace() -> Weight {
		Weight::from_ref_time(84_800_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Marketplace Marketplaces (r:1 w:1)
	fn set_marketplace_owner() -> Weight {
		Weight::from_ref_time(30_600_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Marketplace Marketplaces (r:1 w:1)
	fn set_marketplace_kind() -> Weight {
		Weight::from_ref_time(24_700_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Marketplace Marketplaces (r:1 w:1)
	fn set_marketplace_configuration() -> Weight {
		Weight::from_ref_time(92_700_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Marketplace MarketplaceMintFee (r:0 w:1)
	fn set_marketplace_mint_fee() -> Weight {
		Weight::from_ref_time(24_500_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: NFT Nfts (r:1 w:1)
	// Storage: Marketplace Marketplaces (r:1 w:0)
	// Storage: Marketplace ListedNfts (r:0 w:1)
	fn list_nft() -> Weight {
		Weight::from_ref_time(49_700_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: NFT Nfts (r:1 w:1)
	// Storage: Marketplace ListedNfts (r:1 w:1)
	fn unlist_nft() -> Weight {
		Weight::from_ref_time(33_300_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: NFT Nfts (r:1 w:1)
	// Storage: Marketplace ListedNfts (r:1 w:1)
	// Storage: Marketplace Marketplaces (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	fn buy_nft() -> Weight {
		Weight::from_ref_time(70_700_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
}
