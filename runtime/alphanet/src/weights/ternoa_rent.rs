
//! Autogenerated weights for `ternoa_rent`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-18, STEPS: `2`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `DESKTOP-PAL18UV`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("alphanet-dev"), DB CACHE: 1024

// Executed Command:
// D:\TernoaCode\ternoa-node\target\production\ternoa.exe
// benchmark
// pallet
// --chain=alphanet-dev
// --steps=2
// --repeat=1
// --pallet=ternoa_rent
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `ternoa_rent`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> ternoa_rent::WeightInfo for WeightInfo<T> {
	// Storage: Rent Queues (r:1 w:1)
	// Storage: NFT Nfts (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Rent Contracts (r:0 w:1)
	/// The range of component `s` is `[0, 1000000]`.
	fn create_contract(_s: u32, ) -> Weight {
		Weight::from_ref_time(21_408_300_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Rent Contracts (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Rent Queues (r:1 w:1)
	// Storage: NFT Nfts (r:1 w:1)
	/// The range of component `s` is `[0, 1000000]`.
	fn revoke_contract(_s: u32, ) -> Weight {
		Weight::from_ref_time(17_315_700_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Rent Contracts (r:1 w:1)
	// Storage: Rent Queues (r:1 w:1)
	// Storage: NFT Nfts (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Rent Offers (r:0 w:1)
	/// The range of component `s` is `[0, 1000000]`.
	fn cancel_contract(_s: u32, ) -> Weight {
		Weight::from_ref_time(22_714_300_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Rent Contracts (r:1 w:1)
	// Storage: System Account (r:3 w:3)
	// Storage: Rent Queues (r:1 w:1)
	// Storage: Rent Offers (r:0 w:1)
	/// The range of component `s` is `[0, 1000000]`.
	fn rent(_s: u32, ) -> Weight {
		Weight::from_ref_time(19_789_200_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Rent Contracts (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Rent Offers (r:1 w:1)
	/// The range of component `s` is `[0, 1000000]`.
	fn make_rent_offer(_s: u32, ) -> Weight {
		Weight::from_ref_time(79_300_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Rent Contracts (r:1 w:1)
	// Storage: Rent Offers (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Rent Queues (r:1 w:1)
	/// The range of component `s` is `[0, 1000000]`.
	fn accept_rent_offer(_s: u32, ) -> Weight {
		Weight::from_ref_time(21_727_900_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Rent Offers (r:1 w:1)
	/// The range of component `s` is `[0, 10000]`.
	fn retract_rent_offer(_s: u32, ) -> Weight {
		Weight::from_ref_time(278_800_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Rent Contracts (r:1 w:1)
	// Storage: Rent Offers (r:0 w:1)
	/// The range of component `s` is `[0, 1000000]`.
	fn change_subscription_terms(_s: u32, ) -> Weight {
		Weight::from_ref_time(61_700_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Rent Contracts (r:1 w:1)
	/// The range of component `s` is `[0, 1000000]`.
	fn accept_subscription_terms(_s: u32, ) -> Weight {
		Weight::from_ref_time(56_900_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}
